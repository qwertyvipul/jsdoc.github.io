"use strict";(self.webpackChunkjsdoc_github_io=self.webpackChunkjsdoc_github_io||[]).push([[4821],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),g=r,k=u["".concat(p,".").concat(g)]||u[g]||c[g]||o;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6939:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={title:"Using the Markdown plugin",description:"Enable Markdown support in JSDoc."},i=void 0,l={unversionedId:"plugins-markdown",id:"plugins-markdown",title:"Using the Markdown plugin",description:"Enable Markdown support in JSDoc.",source:"@site/docs/plugins-markdown.md",sourceDirName:".",slug:"/plugins-markdown",permalink:"/plugins-markdown",draft:!1,tags:[],version:"current",frontMatter:{title:"Using the Markdown plugin",description:"Enable Markdown support in JSDoc."},sidebar:"docsSidebar",previous:{title:"About JSDoc plugins",permalink:"/about-plugins"},next:{title:"Tutorials",permalink:"/about-tutorials"}},p={},s=[{value:"Overview",id:"overview",level:2},{value:"Enabling the Markdown plugin",id:"enabling-the-markdown-plugin",level:2},{value:"Converting Markdown in additional JSDoc tags",id:"converting-markdown-in-additional-jsdoc-tags",level:2},{value:"Excluding the default tags from Markdown processing",id:"excluding-the-default-tags-from-markdown-processing",level:2},{value:"Hard-wrapping text at line breaks",id:"hard-wrapping-text-at-line-breaks",level:2},{value:"Adding ID attributes to headings",id:"adding-id-attributes-to-headings",level:2}],d={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"JSDoc includes a Markdown plugin that automatically converts Markdown-formatted text to HTML. You\ncan use this plugin with any JSDoc template. In JSDoc 3.2.2 and later, the Markdown plugin uses the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/chjj/marked"},"marked Markdown parser"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": When you enable the Markdown plugin, be sure to include a leading asterisk on each line of\nyour JSDoc comments. If you omit the leading asterisks, JSDoc's parser may remove asterisks that are\nused for Markdown formatting."),(0,r.kt)("a",{name:"default-tags"}),"By default, JSDoc looks for Markdown-formatted text in the following JSDoc tags:",(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"tags-author"},(0,r.kt)("inlineCode",{parentName:"a"},"@author"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"tags-classdesc"},(0,r.kt)("inlineCode",{parentName:"a"},"@classdesc"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"tags-description"},(0,r.kt)("inlineCode",{parentName:"a"},"@description"))," (including untagged descriptions at the start of a JSDoc\ncomment)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"tags-param"},(0,r.kt)("inlineCode",{parentName:"a"},"@param"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"tags-property"},(0,r.kt)("inlineCode",{parentName:"a"},"@property"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"tags-returns"},(0,r.kt)("inlineCode",{parentName:"a"},"@returns"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"tags-see"},(0,r.kt)("inlineCode",{parentName:"a"},"@see"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"tags-throws"},(0,r.kt)("inlineCode",{parentName:"a"},"@throws")))),(0,r.kt)("h2",{id:"enabling-the-markdown-plugin"},"Enabling the Markdown plugin"),(0,r.kt)("p",null,"To enable the Markdown plugin, add the string ",(0,r.kt)("inlineCode",{parentName:"p"},"plugins/markdown")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"plugins")," array in your\n",(0,r.kt)("a",{parentName:"p",href:"about-configuring-jsdoc"},"JSDoc configuration file"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"JSON configuration file that enables the Markdown plugin"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "plugins": ["plugins/markdown"]\n}\n')),(0,r.kt)("h2",{id:"converting-markdown-in-additional-jsdoc-tags"},"Converting Markdown in additional JSDoc tags"),(0,r.kt)("p",null,"By default, the Markdown plugin only processes ",(0,r.kt)("a",{parentName:"p",href:"#default-tags"},"specific JSDoc tags")," for Markdown\ntext. You can handle Markdown text in other tags by adding a ",(0,r.kt)("inlineCode",{parentName:"p"},"markdown.tags")," property to your JSDoc\nconfiguration file. The ",(0,r.kt)("inlineCode",{parentName:"p"},"markdown.tags")," property contains an array of the additional doclet\nproperties that can contain Markdown text. (In most cases, the name of the doclet property is the\nsame as the tag name. However, some tags are stored differently; for example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"@param")," tag is\nstored in a doclet's ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," property. If you're not sure how a tag's text is stored in a doclet,\nrun JSDoc with the ",(0,r.kt)("inlineCode",{parentName:"p"},"-X/--explain")," tag, which prints each doclet to the console.)"),(0,r.kt)("p",null,"For example, if the ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"bar")," tags accept values that are stored in a doclet's ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"bar"),"\nproperties, you could enable Markdown processing of these tags by adding the following settings to\nyour JSDoc configuration file:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Converting Markdown in 'foo' and 'bar' tags"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "plugins": ["plugins/markdown"],\n    "markdown": {\n        "tags": ["foo", "bar"]\n    }\n}\n')),(0,r.kt)("h2",{id:"excluding-the-default-tags-from-markdown-processing"},"Excluding the default tags from Markdown processing"),(0,r.kt)("p",null,"To prevent the Markdown plugin from processing any of the ",(0,r.kt)("a",{parentName:"p",href:"#default-tags"},"default JSDoc tags"),", add a\n",(0,r.kt)("inlineCode",{parentName:"p"},"markdown.excludeTags")," property to your JSDoc configuration file. The ",(0,r.kt)("inlineCode",{parentName:"p"},"markdown.excludeTags"),"\nproperty contains an array of the default tags that should not be processed for Markdown text."),(0,r.kt)("p",null,"For example, to exclude the ",(0,r.kt)("inlineCode",{parentName:"p"},"author")," tag from Markdown processing:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Excluding the 'author' tag from Markdown processing"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "plugins": ["plugins/markdown"],\n    "markdown": {\n        "excludeTags": ["author"]\n    }\n}\n')),(0,r.kt)("h2",{id:"hard-wrapping-text-at-line-breaks"},"Hard-wrapping text at line breaks"),(0,r.kt)("p",null,"By default, the Markdown plugin does not hard-wrap text at line breaks. This is because it's normal\nfor a JSDoc comment to be wrapped across multiple lines. If you prefer to hard-wrap text at line\nbreaks, set your JSDoc configuration file's ",(0,r.kt)("inlineCode",{parentName:"p"},"markdown.hardwrap")," property to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". This property is\navailable in JSDoc 3.4.0 and later."),(0,r.kt)("h2",{id:"adding-id-attributes-to-headings"},"Adding ID attributes to headings"),(0,r.kt)("p",null,"By default, the Markdown plugin does not add an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," attribute to each HTML heading. To\nautomatically add ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," attributes based on the heading's text, set your JSDoc configuration file's\n",(0,r.kt)("inlineCode",{parentName:"p"},"markdown.idInHeadings")," property to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". This property is available in JSDoc 3.4.0 and later."))}c.isMDXComponent=!0}}]);