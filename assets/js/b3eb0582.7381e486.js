"use strict";(self.webpackChunkjsdoc_github_io=self.webpackChunkjsdoc_github_io||[]).push([[9580],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>y});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),i=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},m=function(e){var a=i(e.components);return n.createElement(s.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=i(t),d=r,y=c["".concat(s,".").concat(d)]||c[d]||u[d]||o;return t?n.createElement(y,l(l({ref:a},m),{},{components:t})):n.createElement(y,l({ref:a},m))}));function y(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var p={};for(var s in a)hasOwnProperty.call(a,s)&&(p[s]=a[s]);p.originalType=e,p[c]="string"==typeof e?e:r,l[1]=p;for(var i=2;i<o;i++)l[i]=t[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2058:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var n=t(7462),r=(t(7294),t(3905));const o={tag:"param",description:"Document the parameter to a function.",synonyms:["arg","argument"],related:["tags-callback.html","tags-returns.html","tags-type.html","tags-typedef.html"]},l=void 0,p={unversionedId:"tags-param",id:"tags-param",title:"tags-param",description:"Document the parameter to a function.",source:"@site/docs/tags-param.md",sourceDirName:".",slug:"/tags-param",permalink:"/tags-param",draft:!1,tags:[],version:"current",frontMatter:{tag:"param",description:"Document the parameter to a function.",synonyms:["arg","argument"],related:["tags-callback.html","tags-returns.html","tags-type.html","tags-typedef.html"]},sidebar:"docsSidebar",previous:{title:"tags-package",permalink:"/tags-package"},next:{title:"tags-private",permalink:"/tags-private"}},s={},i=[{value:"Overview",id:"overview",level:2},{value:"Examples",id:"examples",level:2},{value:"Names, types, and descriptions",id:"names-types-and-descriptions",level:3},{value:"Parameters with properties",id:"parameters-with-properties",level:3},{value:"Optional parameters and default values",id:"optional-parameters-and-default-values",level:3},{value:"Multiple types and repeatable parameters",id:"multiple-types-and-repeatable-parameters",level:3},{value:"Callback functions",id:"callback-functions",level:3}],m={toc:i},c="wrapper";function u(e){let{components:a,...t}=e;return(0,r.kt)(c,(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@param")," tag provides the name, type, and description of a function parameter."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@param")," tag requires you to specify the name of the parameter you are documenting. You can also\ninclude the parameter's type, enclosed in curly brackets, and a description of the parameter."),(0,r.kt)("p",null,"The parameter type can be a built-in JavaScript type, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Object"),", or a\n",(0,r.kt)("a",{parentName:"p",href:"about-namepaths"},"JSDoc namepath")," to another symbol in your code. If you have written documentation for the\nsymbol at that namepath, JSDoc will automatically link to the documentation for that symbol. You can\nalso use a type expression to indicate, for example, that a parameter is not nullable or can accept\nany type; see the ",(0,r.kt)("a",{parentName:"p",href:"tags-type"},(0,r.kt)("inlineCode",{parentName:"a"},"@type")," tag documentation")," for details."),(0,r.kt)("p",null,"If you provide a description, you can make the JSDoc comment more readable by inserting a hyphen\nbefore the description. Be sure to include a space before and after the hyphen."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"names-types-and-descriptions"},"Names, types, and descriptions"),(0,r.kt)("p",null,"The following examples show how to include names, types, and descriptions in a ",(0,r.kt)("inlineCode",{parentName:"p"},"@param")," tag."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Name only"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param somebody\n */\nfunction sayHello(somebody) {\n    alert('Hello ' + somebody);\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Name and type"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {string} somebody\n */\nfunction sayHello(somebody) {\n    alert('Hello ' + somebody);\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Name, type, and description"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {string} somebody Somebody's name.\n */\nfunction sayHello(somebody) {\n    alert('Hello ' + somebody);\n}\n")),(0,r.kt)("p",null,"You can add a hyphen before the description to make it more readable. Be sure to include a space\nbefore and after the hyphen."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Name, type, and description, with a hyphen before the description"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {string} somebody - Somebody's name.\n */\nfunction sayHello(somebody) {\n    alert('Hello ' + somebody);\n}\n")),(0,r.kt)("h3",{id:"parameters-with-properties"},"Parameters with properties"),(0,r.kt)("p",null,"If a parameter is expected to have a specific property, you can document that property by providing\nan additional ",(0,r.kt)("inlineCode",{parentName:"p"},"@param")," tag. For example, if an ",(0,r.kt)("inlineCode",{parentName:"p"},"employee")," parameter is expected to have ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"department")," properties, you can document it as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Documenting a parameter's properties"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Assign the project to an employee.\n * @param {Object} employee - The employee who is responsible for the project.\n * @param {string} employee.name - The name of the employee.\n * @param {string} employee.department - The employee's department.\n */\nProject.prototype.assign = function(employee) {\n    // ...\n};\n")),(0,r.kt)("p",null,"If a parameter is destructured without an explicit name, you can give the object an appropriate one and\ndocument its properties."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Documenting a destructuring parameter"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Assign the project to an employee.\n * @param {Object} employee - The employee who is responsible for the project.\n * @param {string} employee.name - The name of the employee.\n * @param {string} employee.department - The employee's department.\n */\nProject.prototype.assign = function({ name, department }) {\n    // ...\n};\n")),(0,r.kt)("p",null,"You can also combine this syntax with JSDoc's syntax for array parameters. For example, if multiple\nemployees can be assigned to a project:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Documenting properties of values in an array"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Assign the project to a list of employees.\n * @param {Object[]} employees - The employees who are responsible for the project.\n * @param {string} employees[].name - The name of an employee.\n * @param {string} employees[].department - The employee's department.\n */\nProject.prototype.assign = function(employees) {\n    // ...\n};\n")),(0,r.kt)("h3",{id:"optional-parameters-and-default-values"},"Optional parameters and default values"),(0,r.kt)("p",null,"The following examples show how to indicate that a parameter is optional and has a default value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"An optional parameter (using JSDoc syntax)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {string} [somebody] - Somebody's name.\n */\nfunction sayHello(somebody) {\n    if (!somebody) {\n        somebody = 'John Doe';\n    }\n    alert('Hello ' + somebody);\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"An optional parameter (using Google Closure Compiler syntax)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {string=} somebody - Somebody's name.\n */\nfunction sayHello(somebody) {\n    if (!somebody) {\n        somebody = 'John Doe';\n    }\n    alert('Hello ' + somebody);\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"An optional parameter and default value"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {string} [somebody=John Doe] - Somebody's name.\n */\nfunction sayHello(somebody) {\n    if (!somebody) {\n        somebody = 'John Doe';\n    }\n    alert('Hello ' + somebody);\n}\n")),(0,r.kt)("h3",{id:"multiple-types-and-repeatable-parameters"},"Multiple types and repeatable parameters"),(0,r.kt)("p",null,"The following examples show how to use type expressions to indicate that a parameter can accept\nmultiple types (or any type), and that a parameter can be provided more than once. See the\n",(0,r.kt)("a",{parentName:"p",href:"tags-type"},(0,r.kt)("inlineCode",{parentName:"a"},"@type")," tag documentation")," for details about the type expressions that JSDoc supports."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Allows one type OR another type (type union)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {(string|string[])} [somebody=John Doe] - Somebody's name, or an array of names.\n */\nfunction sayHello(somebody) {\n    if (!somebody) {\n        somebody = 'John Doe';\n    } else if (Array.isArray(somebody)) {\n        somebody = somebody.join(', ');\n    }\n    alert('Hello ' + somebody);\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Allows any type"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {*} somebody - Whatever you want.\n */\nfunction sayHello(somebody) {\n    console.log('Hello ' + JSON.stringify(somebody));\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Allows a parameter to be repeated"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Returns the sum of all numbers passed to the function.\n * @param {...number} num - A positive or negative number.\n */\nfunction sum(num) {\n    var i = 0, n = arguments.length, t = 0;\n    for (; i &lt; n; i++) {\n        t += arguments[i];\n    }\n    return t;\n}\n")),(0,r.kt)("h3",{id:"callback-functions"},"Callback functions"),(0,r.kt)("p",null,"If a parameter accepts a callback function, you can use the ",(0,r.kt)("a",{parentName:"p",href:"tags-callback"},(0,r.kt)("inlineCode",{parentName:"a"},"@callback")," tag")," to\ndefine a callback type, then include the callback type in the ",(0,r.kt)("inlineCode",{parentName:"p"},"@param")," tag."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Parameters that accept a callback"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * This callback type is called `requestCallback` and is displayed as a global symbol.\n *\n * @callback requestCallback\n * @param {number} responseCode\n * @param {string} responseMessage\n */\n\n/**\n * Does something asynchronously and executes the callback on completion.\n * @param {requestCallback} cb - The callback that handles the response.\n */\nfunction doSomethingAsynchronously(cb) {\n    // code\n};\n")))}u.isMDXComponent=!0}}]);