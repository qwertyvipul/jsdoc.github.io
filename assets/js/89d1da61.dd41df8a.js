"use strict";(self.webpackChunkjsdoc_github_io=self.webpackChunkjsdoc_github_io||[]).push([[1106],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(t),h=r,d=m["".concat(l,".").concat(h)]||m[h]||p[h]||o;return t?a.createElement(d,s(s({ref:n},u),{},{components:t})):a.createElement(d,s({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=h;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[m]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},8279:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const o={title:"Using namepaths with JSDoc 3",description:"A guide to using namepaths with JSDoc 3.",related:["about-block-inline-tags.html","tags-inline-link.html"]},s=void 0,i={unversionedId:"about-namepaths",id:"about-namepaths",title:"Using namepaths with JSDoc 3",description:"A guide to using namepaths with JSDoc 3.",source:"@site/docs/about-namepaths.md",sourceDirName:".",slug:"/about-namepaths",permalink:"/jsdoc.github.io/about-namepaths",draft:!1,tags:[],version:"current",frontMatter:{title:"Using namepaths with JSDoc 3",description:"A guide to using namepaths with JSDoc 3.",related:["about-block-inline-tags.html","tags-inline-link.html"]},sidebar:"docsSidebar",previous:{title:"Getting Started with JSDoc 3",permalink:"/jsdoc.github.io/about-getting-started"},next:{title:"Command-line arguments to JSDoc",permalink:"/jsdoc.github.io/about-commandline"}},l={},c=[{value:"Namepaths in JSDoc 3",id:"namepaths-in-jsdoc-3",level:2}],u={toc:c},m="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"namepaths-in-jsdoc-3"},"Namepaths in JSDoc 3"),(0,r.kt)("p",null,"When referring to a JavaScript variable that is elsewhere in your documentation, you must provide a unique identifier that maps to that variable. A namepath provides a way to do so and disambiguate between instance members, static members and inner variables."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Basic Syntax Examples of Namepaths in JSDoc 3"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"myFunction\nMyConstructor\nMyConstructor#instanceMember\nMyConstructor.staticMember\nMyConstructor~innerMember // note that JSDoc 2 uses a dash\n")),(0,r.kt)("p",null,"The example below shows: an ",(0,r.kt)("em",{parentName:"p"},"instance"),' method named "say," an ',(0,r.kt)("em",{parentName:"p"},"inner"),' function also named "say," and a ',(0,r.kt)("em",{parentName:"p"},"static"),' method also named "say." These are three distinct methods that all exist independently of one another.'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use a documentation tag to describe your code."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/** @constructor */\nPerson = function () {\n    this.say = function () {\n        return "I\'m an instance.";\n    };\n\n    function say() {\n        return "I\'m inner.";\n    }\n};\nPerson.say = function () {\n    return "I\'m static.";\n};\n\nvar p = new Person();\np.say(); // I\'m an instance.\nPerson.say(); // I\'m static.\n// there is no way to directly access the inner function from here\n')),(0,r.kt)("p",null,"You would use three different namepath syntaxes to refer to the three different methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use a documentation tag to describe your code."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Person#say  // the instance method named "say."\nPerson.say  // the static method named "say."\nPerson~say  // the inner method named "say."\n')),(0,r.kt)("p",null,'You might wonder why there is a syntax to refer to an inner method when that method isn\'t directly accessible from outside the function it is defined in. While that is true, and thus the "~" syntax is rarely used, it ',(0,r.kt)("em",{parentName:"p"},"is")," possible to return a reference to an inner method from another method inside that container, so it is possible that some object elsewhere in your code might borrow an inner method."),(0,r.kt)("p",null,"Note that if a constructor has an instance member that is also a constructor, you can simply chain the namepaths together to form a longer namepath:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Use a documentation tag to describe your code."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/** @constructor */\nPerson = function () {\n    /** @constructor */\n    this.Idea = function () {\n        this.consider = function () {\n            return 'hmmm';\n        };\n    };\n};\n\nvar p = new Person();\nvar i = new p.Idea();\ni.consider();\n")),(0,r.kt)("p",null,'In this case, to refer to the method named "consider," you would use the following namepath:\n',(0,r.kt)("inlineCode",{parentName:"p"},"Person#Idea#consider")),(0,r.kt)("p",null,"This chaining can be used with any combination of the connecting symbols: ",(0,r.kt)("inlineCode",{parentName:"p"},"# . ~")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Special cases: modules, externals and events."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/** A module. Its name is module:foo/bar.\n * @module foo/bar\n */\n/** The built in string object. Its name is external:String.\n * @external String\n */\n/** An event. Its name is module:foo/bar.event:MyEvent.\n * @event module:foo/bar.event:MyEvent\n */\n")),(0,r.kt)("p",null,"There are some special cases with namepaths: ",(0,r.kt)("a",{parentName:"p",href:"tags-module"},"@module"),' names are prefixed by "module:", ',(0,r.kt)("a",{parentName:"p",href:"tags-external"},"@external"),' names are prefixed by "external:", and ',(0,r.kt)("a",{parentName:"p",href:"tags-event"},"@event"),' names are prefixed by "event:".'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Namepaths of objects with special characters in the name."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/** @namespace */\nvar chat = {\n    /**\n     * Refer to this by {@link chat."#channel"}.\n     * @namespace\n     */\n    \'#channel\': {\n        /**\n         * Refer to this by {@link chat."#channel".open}.\n         * @type {boolean}\n         * @defaultvalue\n         */\n        open: true,\n        /**\n         * Internal quotes have to be escaped by backslash. This is\n         * {@link chat."#channel"."say-\\"hello\\""}.\n         */\n        \'say-"hello"\': function (msg) {},\n    },\n};\n\n/**\n * Now we define an event in our {@link chat."#channel"} namespace.\n * @event chat."#channel"."op:announce-motd"\n */\n')),(0,r.kt)("p",null,'Above is an example of a namespace with "unusual" characters in its member names (the hash character, dashes, even quotes).\nTo refer to these you just need quote the names: chat."#channel", chat."#channel"."op:announce-motd", and so on.\nInternal quotes in names should be escaped with backslashes: chat."#channel"."say-\\"hello\\"".'))}p.isMDXComponent=!0}}]);