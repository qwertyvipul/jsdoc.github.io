"use strict";(self.webpackChunkjsdoc_github_io=self.webpackChunkjsdoc_github_io||[]).push([[2681],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9295:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={title:"Block and inline tags",description:"Overview of block and inline JSDoc tags."},l=void 0,i={unversionedId:"about-block-inline-tags",id:"about-block-inline-tags",title:"Block and inline tags",description:"Overview of block and inline JSDoc tags.",source:"@site/docs/about-block-inline-tags.md",sourceDirName:".",slug:"/about-block-inline-tags",permalink:"/about-block-inline-tags",draft:!1,tags:[],version:"current",frontMatter:{title:"Block and inline tags",description:"Overview of block and inline JSDoc tags."},sidebar:"docsSidebar",previous:{title:"Configuring JSDoc's default template",permalink:"/about-configuring-default-template"},next:{title:"About JSDoc plugins",permalink:"/about-plugins"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Examples",id:"examples",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"JSDoc supports two different kinds of tags:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Block tags"),", which are at the top level of a JSDoc comment."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Inline tags"),", which are within the text of a block tag or a description.")),(0,o.kt)("p",null,"Block tags usually provide detailed information about your code, such as the parameters that a\nfunction accepts. Inline tags usually link to other parts of the documentation, similar to the\nanchor tag (",(0,o.kt)("inlineCode",{parentName:"p"},"<a>"),") in HTML."),(0,o.kt)("p",null,"Block tags always begin with an at sign (",(0,o.kt)("inlineCode",{parentName:"p"},"@"),"). Each block tag must be followed by a line break,\nwith the exception of the last block tag in a JSDoc comment."),(0,o.kt)("p",null,"Inline tags also begin with an at sign. However, inline tags and their text must be enclosed in\ncurly braces (",(0,o.kt)("inlineCode",{parentName:"p"},"{")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"}"),"). The ",(0,o.kt)("inlineCode",{parentName:"p"},"{")," denotes the start of the inline tag, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"}")," denotes the end\nof the inline tag. If your tag's text includes a closing curly brace (",(0,o.kt)("inlineCode",{parentName:"p"},"}"),"), you must escape it with\na leading backslash (",(0,o.kt)("inlineCode",{parentName:"p"},"\\"),"). You do not need to use a line break after inline tags."),(0,o.kt)("p",null,'Most JSDoc tags are block tags. In general, when this site refers to "JSDoc tags," we really mean\n"block tags."'),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"In the following example, ",(0,o.kt)("inlineCode",{parentName:"p"},"@param")," is a block tag, and ",(0,o.kt)("inlineCode",{parentName:"p"},"{@link}")," is an inline tag:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Block and inline tags in JSDoc comments"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Set the shoe's color. Use {@link Shoe#setSize} to set the shoe size.\n *\n * @param {string} color - The shoe's color.\n */\nShoe.prototype.setColor = function (color) {\n    // ...\n};\n")),(0,o.kt)("p",null,"You can use inline tags within a description, as shown above, or within a block tag, as shown below:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Inline tag used within a block tag"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Set the shoe's color.\n *\n * @param {SHOE_COLORS} color - The shoe color. Must be an enumerated\n * value of {@link SHOE_COLORS}.\n */\nShoe.prototype.setColor = function (color) {\n    // ...\n};\n")),(0,o.kt)("p",null,"When you use multiple block tags in a JSDoc comment, they must be separated by line breaks:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Multiple block tags separated by line breaks"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Set the color and type of the shoelaces.\n *\n * @param {LACE_COLORS} color - The shoelace color.\n * @param {LACE_TYPES} type - The type of shoelace.\n */\nShoe.prototype.setLaceType = function (color, type) {\n    // ...\n};\n")))}m.isMDXComponent=!0}}]);