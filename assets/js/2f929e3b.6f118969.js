"use strict";(self.webpackChunkjsdoc_github_io=self.webpackChunkjsdoc_github_io||[]).push([[5604],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=o.createContext({}),s=function(e){var t=o.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(m.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,m=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,h=d["".concat(m,".").concat(c)]||d[c]||p[c]||a;return n?o.createElement(h,l(l({ref:t},u),{},{components:n})):o.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=c;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8129:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const a={title:"ES 2015 Modules",description:"How to add JSDoc comments to ECMAScript 2015 modules.",related:["about-namepaths.html","tags-module.html"]},l=void 0,i={unversionedId:"howto-es2015-modules",id:"howto-es2015-modules",title:"ES 2015 Modules",description:"How to add JSDoc comments to ECMAScript 2015 modules.",source:"@site/docs/howto-es2015-modules.md",sourceDirName:".",slug:"/howto-es2015-modules",permalink:"/jsdoc.github.io/howto-es2015-modules",draft:!1,tags:[],version:"current",frontMatter:{title:"ES 2015 Modules",description:"How to add JSDoc comments to ECMAScript 2015 modules.",related:["about-namepaths.html","tags-module.html"]},sidebar:"docsSidebar",previous:{title:"ES 2015 Classes",permalink:"/jsdoc.github.io/howto-es2015-classes"},next:{title:"CommonJS Modules",permalink:"/jsdoc.github.io/howto-commonjs-modules"}},m={},s=[{value:"Module identifiers",id:"module-identifiers",level:2},{value:"Exported values",id:"exported-values",level:2}],u={toc:s},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"JSDoc 3 makes it possible to document modules that follow the ",(0,r.kt)("a",{parentName:"p",href:"http://www.ecma-international.org/ecma-262/6.0/#sec-modules"},"ECMAScript 2015\nspecification"),". ES 2015 modules are supported in JSDoc 3.4.0 and later."),(0,r.kt)("h2",{id:"module-identifiers"},"Module identifiers"),(0,r.kt)("p",null,"When you document an ES 2015 module, you'll use a ",(0,r.kt)("a",{parentName:"p",href:"tags-module"},(0,r.kt)("inlineCode",{parentName:"a"},"@module")," tag")," to document the\nidentifier for the module. For example, if users load the module by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"import * as myShirt\nfrom 'my/shirt'"),", you'll write a JSDoc comment that contains the tag ",(0,r.kt)("inlineCode",{parentName:"p"},"@module my/shirt"),"."),(0,r.kt)("p",null,"If you use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@module")," tag without a value, JSDoc will try to guess the correct module identifier\nbased on the filepath."),(0,r.kt)("p",null,"When you use a JSDoc ",(0,r.kt)("a",{parentName:"p",href:"about-namepaths"},"namepath")," to refer to a module from another JSDoc comment, you must\nadd the prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"module:"),". For example, if you want the documentation for the module ",(0,r.kt)("inlineCode",{parentName:"p"},"my/pants")," to\nlink to the module ",(0,r.kt)("inlineCode",{parentName:"p"},"my/shirt"),", you could use the ",(0,r.kt)("a",{parentName:"p",href:"tags-see"},(0,r.kt)("inlineCode",{parentName:"a"},"@see")," tag")," to document ",(0,r.kt)("inlineCode",{parentName:"p"},"my/pants")," as\nfollows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Pants module.\n * @module my/pants\n * @see module:my/shirt\n */\n")),(0,r.kt)("p",null,"Similarly, the namepath for each member of the module will start with ",(0,r.kt)("inlineCode",{parentName:"p"},"module:"),", followed by the\nmodule name. For example, if your ",(0,r.kt)("inlineCode",{parentName:"p"},"my/pants")," module exports a ",(0,r.kt)("inlineCode",{parentName:"p"},"Jeans")," class, and ",(0,r.kt)("inlineCode",{parentName:"p"},"Jeans")," has an\ninstance method named ",(0,r.kt)("inlineCode",{parentName:"p"},"hem"),", the instance method's longname is ",(0,r.kt)("inlineCode",{parentName:"p"},"module:my/pants.Jeans#hem"),"."),(0,r.kt)("h2",{id:"exported-values"},"Exported values"),(0,r.kt)("p",null,"The following example shows how to document different kinds of exported values in an ES 2015 module.\nIn most cases, you can simply add a JSDoc comment to the ",(0,r.kt)("inlineCode",{parentName:"p"},"export")," statement that defines the\nexported value. If you are exporting a value under another name, you can document the exported value\nwithin its ",(0,r.kt)("inlineCode",{parentName:"p"},"export")," block."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Documenting values exported by a module"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/** @module color/mixer */\n\n/** The name of the module. */\nexport const name = 'mixer';\n\n/** The most recent blended color. */\nexport var lastColor = null;\n\n/**\n * Blend two colors together.\n * @param {string} color1 - The first color, in hexadecimal format.\n * @param {string} color2 - The second color, in hexadecimal format.\n * @return {string} The blended color.\n */\nexport function blend(color1, color2) {}\n\n// convert color to array of RGB values (0-255)\nfunction rgbify(color) {}\n\nexport {\n    /**\n     * Get the red, green, and blue values of a color.\n     * @function\n     * @param {string} color - A color, in hexadecimal format.\n     * @returns {Array.&lt;number>} An array of the red, green, and blue values,\n     * each ranging from 0 to 255.\n     */\n    rgbify as toRgb\n}\n")))}p.isMDXComponent=!0}}]);