"use strict";(self.webpackChunkjsdoc_github_io=self.webpackChunkjsdoc_github_io||[]).push([[6483],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,d=u["".concat(s,".").concat(h)]||u[h]||p[h]||o;return n?a.createElement(d,i(i({ref:t},m),{},{components:n})):a.createElement(d,i({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3829:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={tag:"name",description:"Document the name of an object.",related:["about-namepaths.html","tags-alias.html"]},i=void 0,l={unversionedId:"tags-name",id:"tags-name",title:"tags-name",description:"Document the name of an object.",source:"@site/docs/tags-name.md",sourceDirName:".",slug:"/tags-name",permalink:"/jsdoc.github.io/tags-name",draft:!1,tags:[],version:"current",frontMatter:{tag:"name",description:"Document the name of an object.",related:["about-namepaths.html","tags-alias.html"]},sidebar:"docsSidebar",previous:{title:"tags-module",permalink:"/jsdoc.github.io/tags-module"},next:{title:"tags-namespace",permalink:"/jsdoc.github.io/tags-namespace"}},s={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Overview",id:"overview",level:2},{value:"Examples",id:"examples",level:2}],m={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@name <namePath>")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,'The @name tag forces JSDoc to associate the remainder of the JSDoc comment with the given name,\nignoring all surrounding code. This tag is best used in "virtual comments" for symbols that are not\nreadily visible in the code, such as methods that are generated at runtime.'),(0,r.kt)("p",null,"When you use the @name tag, you must provide additional tags that tell JSDoc what kind of symbol you\nare documenting; whether the symbol is a member of another symbol; and so on. If you do not provide\nthis information, the symbol will not be documented correctly."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Warning"),": By using the @name tag, you are telling JSDoc to ",(0,r.kt)("em",{parentName:"p"},"ignore the surrounding code")," and\ntreat your documentation comment in isolation. In many cases, it is best to use the\n",(0,r.kt)("a",{parentName:"p",href:"tags-alias"},"@alias tag")," instead, which changes a symbol's name in the documentation but preserves\nother information about the symbol."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"The following example shows how to use the @name tag to document a function that JSDoc would not\nnormally recognize."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Using the @name tag"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * @name highlightSearchTerm\n * @function\n * @global\n * @param {string} term - The search term to highlight.\n */\neval("window.highlightSearchTerm = function(term) {};")\n')))}p.isMDXComponent=!0}}]);