"use strict";(self.webpackChunkjsdoc_github_io=self.webpackChunkjsdoc_github_io||[]).push([[2026],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),f=r,d=u["".concat(l,".").concat(f)]||u[f]||m[f]||o;return n?a.createElement(d,s(s({ref:t},p),{},{components:n})):a.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=f;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8349:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={tag:"alias",description:"Treat a member as if it had a different name.",related:["tags-name.html","tags-lends.html"]},s=void 0,i={unversionedId:"tags-alias",id:"tags-alias",title:"tags-alias",description:"Treat a member as if it had a different name.",source:"@site/docs/tags-alias.md",sourceDirName:".",slug:"/tags-alias",permalink:"/tags-alias",draft:!1,tags:[],version:"current",frontMatter:{tag:"alias",description:"Treat a member as if it had a different name.",related:["tags-name.html","tags-lends.html"]},sidebar:"docsSidebar",previous:{title:"tags-access",permalink:"/tags-access"},next:{title:"tags-async",permalink:"/tags-async"}},l={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Overview",id:"overview",level:2},{value:"Examples",id:"examples",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@alias <aliasNamepath>")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The @alias tag causes JSDoc to treat all references to a member as if the member had a different\nname. This tag is especially useful if you define a class within an inner function; in this case,\nyou can use the @alias tag to tell JSDoc how the class is exposed in your app."),(0,r.kt)("p",null,"While the @alias tag may sound similar to the @name tag, these tags behave very differently. The\n@name tag tells JSDoc to ignore any code associated with the comment. For example, when JSDoc\nprocesses the following code, it ignores the fact that the comment for ",(0,r.kt)("inlineCode",{parentName:"p"},"bar")," is attached to a\nfunction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Bar function.\n * @name bar\n */\nfunction foo() {}\n")),(0,r.kt)("p",null,"The @alias tag tells JSDoc to pretend that Member A is actually named Member B. For example, when\nJSDoc processes the following code, it recognizes that ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," is a function, then renames ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," to\n",(0,r.kt)("inlineCode",{parentName:"p"},"bar")," in the documentation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Bar function.\n * @alias bar\n */\nfunction foo() {}\n")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Suppose you are using a class framework that expects you to pass in a constructor function when you\ndefine a class. You can use the @alias tag to tell JSDoc how the class will be exposed in your app."),(0,r.kt)("p",null,'In the following example, the @alias tag tells JSDoc to treat the anonymous function as if it were\nthe constructor for the class "trackr.CookieManager". Within the function, JSDoc interprets the\n',(0,r.kt)("inlineCode",{parentName:"p"},"this"),' keyword relative to trackr.CookieManager, so the "value" method has the namepath\n"trackr.CookieManager#value".'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Using @alias with an anonymous constructor function"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"Klass('trackr.CookieManager',\n\n    /**\n     * @class\n     * @alias trackr.CookieManager\n     * @param {Object} kv\n     */\n    function(kv) {\n        /** The value. */\n        this.value = kv;\n    }\n\n);\n")),(0,r.kt)("p",null,"You can also use the @alias tag with members that are created within an immediately invoked function\nexpression (IIFE). The @alias tag tells JSDoc that these members are exposed outside of the IIFE's\nscope."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Using @alias for static members of a namespace"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/** @namespace */\nvar Apple = {};\n\n(function(ns) {\n    /**\n     * @namespace\n     * @alias Apple.Core\n     */\n    var core = {};\n\n    /** Documented as Apple.Core.seed */\n    core.seed = function() {};\n\n    ns.Core = core;\n})(Apple);\n")),(0,r.kt)("p",null,"For members that are defined within an object literal, you can use the @alias tag as an alternative\nto the ",(0,r.kt)("a",{parentName:"p",href:"tags-lends"},"@lends")," tag."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Using @alias for an object literal"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Documenting objectA with @alias\n\nvar objectA = (function() {\n\n    /**\n     * Documented as objectA\n     * @alias objectA\n     * @namespace\n     */\n    var x = {\n        /**\n         * Documented as objectA.myProperty\n         * @member\n         */\n        myProperty: 'foo'\n    };\n\n    return x;\n})();\n\n// Documenting objectB with @lends\n\n/**\n * Documented as objectB\n * @namespace\n */\nvar objectB = (function() {\n\n    /** @lends objectB */\n    var x = {\n        /**\n         * Documented as objectB.myProperty\n         * @member\n         */\n        myProperty: 'bar'\n    };\n\n    return x;\n})();\n")))}m.isMDXComponent=!0}}]);