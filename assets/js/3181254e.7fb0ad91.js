"use strict";(self.webpackChunkjsdoc_github_io=self.webpackChunkjsdoc_github_io||[]).push([[8545],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,h=u["".concat(i,".").concat(d)]||u[d]||m[d]||s;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5846:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const s={title:"ES 2015 Classes",description:"How to add JSDoc comments to ECMAScript 2015 classes.",related:["tags-augments.html"]},o=void 0,l={unversionedId:"howto-es2015-classes",id:"howto-es2015-classes",title:"ES 2015 Classes",description:"How to add JSDoc comments to ECMAScript 2015 classes.",source:"@site/docs/howto-es2015-classes.md",sourceDirName:".",slug:"/howto-es2015-classes",permalink:"/howto-es2015-classes",draft:!1,tags:[],version:"current",frontMatter:{title:"ES 2015 Classes",description:"How to add JSDoc comments to ECMAScript 2015 classes.",related:["tags-augments.html"]},sidebar:"docsSidebar",previous:{title:"License",permalink:"/about-license-jsdoc3"},next:{title:"ES 2015 Modules",permalink:"/howto-es2015-modules"}},i={},c=[{value:"Documenting a simple class",id:"documenting-a-simple-class",level:2},{value:"Extending classes",id:"extending-classes",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"JSDoc 3 makes it easy to document classes that follow the ",(0,r.kt)("a",{parentName:"p",href:"http://www.ecma-international.org/ecma-262/6.0/#sec-class-definitions"},"ECMAScript 2015\nspecification"),". You don't need to use tags such as ",(0,r.kt)("inlineCode",{parentName:"p"},"@class")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@constructor")," with\nES 2015 classes\u2014JSDoc automatically identifies classes and their constructors simply by parsing your\ncode. ES 2015 classes are supported in JSDoc 3.4.0 and later."),(0,r.kt)("h2",{id:"documenting-a-simple-class"},"Documenting a simple class"),(0,r.kt)("p",null,"The following example shows how to document a simple class with a constructor, two instance methods,\nand one static method:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Simple ES 2015 class"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/** Class representing a point. */\nclass Point {\n    /**\n     * Create a point.\n     * @param {number} x - The x value.\n     * @param {number} y - The y value.\n     */\n    constructor(x, y) {\n        // ...\n    }\n\n    /**\n     * Get the x value.\n     * @return {number} The x value.\n     */\n    getX() {\n        // ...\n    }\n\n    /**\n     * Get the y value.\n     * @return {number} The y value.\n     */\n    getY() {\n        // ...\n    }\n\n    /**\n     * Convert a string containing two comma-separated numbers into a point.\n     * @param {string} str - The string containing two comma-separated numbers.\n     * @return {Point} A Point object.\n     */\n    static fromString(str) {\n        // ...\n    }\n}\n")),(0,r.kt)("p",null,"You can also document classes that are defined in a class expression, which assigns the class to a\nvariable or constant:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ES 2015 class expression"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/** Class representing a point. */\nconst Point = class {\n    // and so on\n}\n")),(0,r.kt)("h2",{id:"extending-classes"},"Extending classes"),(0,r.kt)("p",null,"When you use the ",(0,r.kt)("inlineCode",{parentName:"p"},"extends")," keyword to extend an existing class, you also need to tell JSDoc which\nclass you're extending. You do this with the ",(0,r.kt)("a",{parentName:"p",href:"tags-augments"},(0,r.kt)("inlineCode",{parentName:"a"},"@augments")," (or ",(0,r.kt)("inlineCode",{parentName:"a"},"@extends"),") tag"),"."),(0,r.kt)("p",null,"For example, to extend the ",(0,r.kt)("inlineCode",{parentName:"p"},"Point")," class shown above:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Extending an ES 2015 class"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Class representing a dot.\n * @extends Point\n */\nclass Dot extends Point {\n    /**\n     * Create a dot.\n     * @param {number} x - The x value.\n     * @param {number} y - The y value.\n     * @param {number} width - The width of the dot, in pixels.\n     */\n    constructor(x, y, width) {\n        // ...\n    }\n\n    /**\n     * Get the dot's width.\n     * @return {number} The dot's width, in pixels.\n     */\n    getWidth() {\n        // ...\n    }\n}\n")))}m.isMDXComponent=!0}}]);