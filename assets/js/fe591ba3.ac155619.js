"use strict";(self.webpackChunkjsdoc_github_io=self.webpackChunkjsdoc_github_io||[]).push([[4],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=a.createContext({}),m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=m(t),d=s,h=p["".concat(l,".").concat(d)]||p[d]||u[d]||r;return t?a.createElement(h,o(o({ref:n},c),{},{components:t})):a.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,o=new Array(r);o[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:s,o[1]=i;for(var m=2;m<r;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6684:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var a=t(7462),s=(t(7294),t(3905));const r={tag:"lends",description:"Document properties on an object literal as if they belonged to a symbol with a given name.",related:["tags-borrows.html","tags-constructs.html"]},o=void 0,i={unversionedId:"tags-lends",id:"tags-lends",title:"tags-lends",description:"Document properties on an object literal as if they belonged to a symbol with a given name.",source:"@site/docs/tags-lends.md",sourceDirName:".",slug:"/tags-lends",permalink:"/tags-lends",draft:!1,tags:[],version:"current",frontMatter:{tag:"lends",description:"Document properties on an object literal as if they belonged to a symbol with a given name.",related:["tags-borrows.html","tags-constructs.html"]},sidebar:"docsSidebar",previous:{title:"tags-kind",permalink:"/tags-kind"},next:{title:"tags-license",permalink:"/tags-license"}},l={},m=[{value:"Syntax",id:"syntax",level:2},{value:"Overview",id:"overview",level:2},{value:"Examples",id:"examples",level:2}],c={toc:m},p="wrapper";function u(e){let{components:n,...t}=e;return(0,s.kt)(p,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"syntax"},"Syntax"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"@lends <namepath>")),(0,s.kt)("h2",{id:"overview"},"Overview"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"@lends")," tag allows you to document all the members of an object literal as if they were members\nof a symbol with the given name. You might want to do this if you are passing an object literal into\na function that creates a named class from its members."),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("p",null,"In this example, we want to use a helper function to make a class named ",(0,s.kt)("inlineCode",{parentName:"p"},"Person"),", along with\ninstance methods named ",(0,s.kt)("inlineCode",{parentName:"p"},"initialize")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"say"),". This is similar to how some popular frameworks\nhandle class creation."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Example class"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// We want to document this as being a class\nvar Person = makeClass(\n    // We want to document these as being methods\n    {\n        initialize: function(name) {\n            this.name = name;\n        },\n        say: function(message) {\n            return this.name + " says: " + message;\n        }\n    }\n);\n')),(0,s.kt)("p",null,"Without any comments, JSDoc won't recognize that this code creates a ",(0,s.kt)("inlineCode",{parentName:"p"},"Person")," class with two\nmethods. To document the methods, we must use a ",(0,s.kt)("inlineCode",{parentName:"p"},"@lends")," tag in a doc comment immediately before the\nobject literal. The ",(0,s.kt)("inlineCode",{parentName:"p"},"@lends"),' tag tells JSDoc that all the member names of that object literal are\nbeing "loaned" to a variable named ',(0,s.kt)("inlineCode",{parentName:"p"},"Person"),". We must also add comments to each of the methods."),(0,s.kt)("p",null,"The following example gets us closer to what we want:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Documented as static methods"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'/** @class */\nvar Person = makeClass(\n    /** @lends Person */\n    {\n        /**\n         * Create a `Person` instance.\n         * @param {string} name - The person\'s name.\n         */\n        initialize: function(name) {\n            this.name = name;\n        },\n        /**\n         * Say something.\n         * @param {string} message - The message to say.\n         * @returns {string} The complete message.\n         */\n        say: function(message) {\n            return this.name + " says: " + message;\n        }\n    }\n);\n')),(0,s.kt)("p",null,"Now the functions named ",(0,s.kt)("inlineCode",{parentName:"p"},"initialize")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"say")," will be documented, but they appear as static methods\nof the ",(0,s.kt)("inlineCode",{parentName:"p"},"Person")," class. That is possibly what you meant, but in this case we want ",(0,s.kt)("inlineCode",{parentName:"p"},"initialize")," and\n",(0,s.kt)("inlineCode",{parentName:"p"},"say")," to belong to the instances of the ",(0,s.kt)("inlineCode",{parentName:"p"},"Person")," class. So we change things slightly by lending the\nmethods to the class's prototype:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Documented as instance methods"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'/** @class */\nvar Person = makeClass(\n    /** @lends Person.prototype */\n    {\n        /**\n         * Create a `Person` instance.\n         * @param {string} name - The person\'s name.\n         */\n        initialize: function(name) {\n            this.name = name;\n        },\n        /**\n         * Say something.\n         * @param {string} message - The message to say.\n         * @returns {string} The complete message.\n         */\n        say: function(message) {\n            return this.name + " says: " + message;\n        }\n    }\n);\n')),(0,s.kt)("p",null,"One final step: Our class framework uses the loaned ",(0,s.kt)("inlineCode",{parentName:"p"},"initialize")," function to construct ",(0,s.kt)("inlineCode",{parentName:"p"},"Person"),"\ninstances, but a ",(0,s.kt)("inlineCode",{parentName:"p"},"Person")," instance does not have its own ",(0,s.kt)("inlineCode",{parentName:"p"},"initialize")," method. The solution is to add\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"@constructs")," tag to the loaned function. Remember to remove the ",(0,s.kt)("inlineCode",{parentName:"p"},"@class")," tag as well, or else\ntwo classes will be documented."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Documented with a constructor"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'var Person = makeClass(\n    /** @lends Person.prototype */\n    {\n        /**\n         * Create a `Person` instance.\n         * @constructs\n         * @param {string} name - The person\'s name.\n         */\n        initialize: function(name) {\n            this.name = name;\n        },\n        /**\n         * Say something.\n         * @param {string} message - The message to say.\n         * @returns {string} The complete message.\n         */\n        say: function(message) {\n            return this.name + " says: " + message;\n        }\n    }\n);\n')))}u.isMDXComponent=!0}}]);