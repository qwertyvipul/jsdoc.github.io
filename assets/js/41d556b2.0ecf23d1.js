"use strict";(self.webpackChunkjsdoc_github_io=self.webpackChunkjsdoc_github_io||[]).push([[4219],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={tag:"variation",description:"Distinguish different objects with the same name.",related:["tags-alias.html","tags-name.html"]},o=void 0,s={unversionedId:"tags-variation",id:"tags-variation",title:"tags-variation",description:"Distinguish different objects with the same name.",source:"@site/docs/tags-variation.md",sourceDirName:".",slug:"/tags-variation",permalink:"/jsdoc.github.io/tags-variation",draft:!1,tags:[],version:"current",frontMatter:{tag:"variation",description:"Distinguish different objects with the same name.",related:["tags-alias.html","tags-name.html"]},sidebar:"docsSidebar",previous:{title:"tags-typedef",permalink:"/jsdoc.github.io/tags-typedef"},next:{title:"tags-version",permalink:"/jsdoc.github.io/tags-version"}},l={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Overview",id:"overview",level:2},{value:"Examples",id:"examples",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@variation <variationNumber>")),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Sometimes your code may include multiple symbols with the same longname. For example, you might have\nboth a global class and a top-level namespace called ",(0,i.kt)("inlineCode",{parentName:"p"},"Widget"),'. In cases such as these, what does\n"{@link Widget}" or "@memberof Widget" mean? The global namespace, or the global class?'),(0,i.kt)("p",null,'Variations help JSDoc distinguish between different symbols with the same longname. For example, if\n"@variation 2" is added to the JSDoc comment for the Widget class, "{@link Widget(2)}" will refer to\nthe class, and "{@link Widget}" will refer to the namespace. Alternatively, you can include the\nvariation when you specify the symbol\'s with tags such as ',(0,i.kt)("a",{parentName:"p",href:"tags-alias"},"@alias")," or ",(0,i.kt)("a",{parentName:"p",href:"tags-name"},"@name"),'\n(for example, "@alias Widget(2)").'),(0,i.kt)("p",null,"You can provide any value with the @variation tag, as long as the combination of the value and the\nlongname results in a globally unique version of the longname. As a best practice, use a predictable\npattern for choosing the values, which will make it easier for you to document your code."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"The following example uses the @variation tag to distinguish between the Widget class and the Widget\nnamespace."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Using the @variation tag"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * The Widget namespace.\n * @namespace Widget\n */\n\n// you can also use '@class Widget(2)' and omit the @variation tag\n/**\n * The Widget class. Defaults to the properties in {@link Widget.properties}.\n * @class\n * @variation 2\n * @param {Object} props - Name-value pairs to add to the widget.\n */\nfunction Widget(props) {}\n\n/**\n * Properties added by default to a new {@link Widget(2)} instance.\n */\nWidget.properties = {\n    /**\n     * Indicates whether the widget is shiny.\n     */\n    shiny: true,\n    /**\n     * Indicates whether the widget is metallic.\n     */\n    metallic: true\n};\n")))}d.isMDXComponent=!0}}]);